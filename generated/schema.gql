# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateGym {
  _avg: GymAvgAggregate
  _count: GymCountAggregate
  _max: GymMaxAggregate
  _min: GymMinAggregate
  _sum: GymSumAggregate
}

type AggregatePost {
  _avg: PostAvgAggregate
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
  _sum: PostSumAggregate
}

type AggregatePostLike {
  _avg: PostLikeAvgAggregate
  _count: PostLikeCountAggregate
  _max: PostLikeMaxAggregate
  _min: PostLikeMinAggregate
  _sum: PostLikeSumAggregate
}

type AggregatePreferredDayAndTime {
  _avg: PreferredDayAndTimeAvgAggregate
  _count: PreferredDayAndTimeCountAggregate
  _max: PreferredDayAndTimeMaxAggregate
  _min: PreferredDayAndTimeMinAggregate
  _sum: PreferredDayAndTimeSumAggregate
}

type AggregateReply {
  _avg: ReplyAvgAggregate
  _count: ReplyCountAggregate
  _max: ReplyMaxAggregate
  _min: ReplyMinAggregate
  _sum: ReplySumAggregate
}

type AggregateViewHistory {
  _avg: ViewHistoryAvgAggregate
  _count: ViewHistoryCountAggregate
  _max: ViewHistoryMaxAggregate
  _min: ViewHistoryMinAggregate
  _sum: ViewHistorySumAggregate
}

enum ClimbingType {
  BOTH
  BOULDER
  LEAD
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumClimbingTypeFieldUpdateOperationsInput {
  set: ClimbingType
}

input EnumClimbingTypeFilter {
  equals: ClimbingType
  in: [ClimbingType!]
  not: NestedEnumClimbingTypeFilter
  notIn: [ClimbingType!]
}

input EnumClimbingTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumClimbingTypeFilter
  _min: NestedEnumClimbingTypeFilter
  equals: ClimbingType
  in: [ClimbingType!]
  not: NestedEnumClimbingTypeWithAggregatesFilter
  notIn: [ClimbingType!]
}

type Gym {
  Posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  _count: GymCount
  climbingType: ClimbingType!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  image: String
  name: String!
  updatedAt: DateTime!
}

type GymAvgAggregate {
  id: Float
}

input GymAvgOrderByAggregateInput {
  id: SortOrder
}

type GymCount {
  Posts: Int!
}

type GymCountAggregate {
  _all: Int!
  climbingType: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  image: Int!
  name: Int!
  updatedAt: Int!
}

input GymCountOrderByAggregateInput {
  climbingType: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GymCreateInput {
  Posts: PostCreateNestedManyWithoutGymInput
  climbingType: ClimbingType!
  createdAt: DateTime
  deletedAt: DateTime
  image: String
  name: String!
  updatedAt: DateTime
}

input GymCreateManyInput {
  climbingType: ClimbingType!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  image: String
  name: String!
  updatedAt: DateTime
}

input GymCreateNestedOneWithoutPostsInput {
  connect: GymWhereUniqueInput
  connectOrCreate: GymCreateOrConnectWithoutPostsInput
  create: GymCreateWithoutPostsInput
}

input GymCreateOrConnectWithoutPostsInput {
  create: GymCreateWithoutPostsInput!
  where: GymWhereUniqueInput!
}

input GymCreateWithoutPostsInput {
  climbingType: ClimbingType!
  createdAt: DateTime
  deletedAt: DateTime
  image: String
  name: String!
  updatedAt: DateTime
}

type GymGroupBy {
  _avg: GymAvgAggregate
  _count: GymCountAggregate
  _max: GymMaxAggregate
  _min: GymMinAggregate
  _sum: GymSumAggregate
  climbingType: ClimbingType!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  image: String
  name: String!
  updatedAt: DateTime!
}

type GymMaxAggregate {
  climbingType: ClimbingType
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  image: String
  name: String
  updatedAt: DateTime
}

input GymMaxOrderByAggregateInput {
  climbingType: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type GymMinAggregate {
  climbingType: ClimbingType
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  image: String
  name: String
  updatedAt: DateTime
}

input GymMinOrderByAggregateInput {
  climbingType: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GymOrderByWithAggregationInput {
  _avg: GymAvgOrderByAggregateInput
  _count: GymCountOrderByAggregateInput
  _max: GymMaxOrderByAggregateInput
  _min: GymMinOrderByAggregateInput
  _sum: GymSumOrderByAggregateInput
  climbingType: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GymOrderByWithRelationInput {
  Posts: PostOrderByRelationAggregateInput
  climbingType: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GymRelationFilter {
  is: GymWhereInput
  isNot: GymWhereInput
}

enum GymScalarFieldEnum {
  climbingType
  createdAt
  deletedAt
  id
  image
  name
  updatedAt
}

input GymScalarWhereWithAggregatesInput {
  AND: [GymScalarWhereWithAggregatesInput!]
  NOT: [GymScalarWhereWithAggregatesInput!]
  OR: [GymScalarWhereWithAggregatesInput!]
  climbingType: EnumClimbingTypeWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type GymSumAggregate {
  id: Int
}

input GymSumOrderByAggregateInput {
  id: SortOrder
}

input GymUpdateInput {
  Posts: PostUpdateManyWithoutGymNestedInput
  climbingType: EnumClimbingTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GymUpdateManyMutationInput {
  climbingType: EnumClimbingTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GymUpdateOneRequiredWithoutPostsNestedInput {
  connect: GymWhereUniqueInput
  connectOrCreate: GymCreateOrConnectWithoutPostsInput
  create: GymCreateWithoutPostsInput
  update: GymUpdateWithoutPostsInput
  upsert: GymUpsertWithoutPostsInput
}

input GymUpdateWithoutPostsInput {
  climbingType: EnumClimbingTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GymUpsertWithoutPostsInput {
  create: GymCreateWithoutPostsInput!
  update: GymUpdateWithoutPostsInput!
}

input GymWhereInput {
  AND: [GymWhereInput!]
  NOT: [GymWhereInput!]
  OR: [GymWhereInput!]
  Posts: PostListRelationFilter
  climbingType: EnumClimbingTypeFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input GymWhereUniqueInput {
  id: Int
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyGym(data: [GymCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPost(data: [PostCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPostLike(data: [PostLikeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPreferredDayAndTime(data: [PreferredDayAndTimeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyReply(data: [ReplyCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyViewHistory(data: [ViewHistoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneGym(data: GymCreateInput!): Gym!
  createOnePost(data: PostCreateInput!): Post!
  createOnePostLike(data: PostLikeCreateInput!): PostLike!
  createOnePreferredDayAndTime(data: PreferredDayAndTimeCreateInput!): PreferredDayAndTime!
  createOneReply(data: ReplyCreateInput!): Reply!
  createOneViewHistory(data: ViewHistoryCreateInput!): ViewHistory!
  deleteManyGym(where: GymWhereInput): AffectedRowsOutput!
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  deleteManyPostLike(where: PostLikeWhereInput): AffectedRowsOutput!
  deleteManyPreferredDayAndTime(where: PreferredDayAndTimeWhereInput): AffectedRowsOutput!
  deleteManyReply(where: ReplyWhereInput): AffectedRowsOutput!
  deleteManyViewHistory(where: ViewHistoryWhereInput): AffectedRowsOutput!
  deleteOneGym(where: GymWhereUniqueInput!): Gym
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOnePostLike(where: PostLikeWhereUniqueInput!): PostLike
  deleteOnePreferredDayAndTime(where: PreferredDayAndTimeWhereUniqueInput!): PreferredDayAndTime
  deleteOneReply(where: ReplyWhereUniqueInput!): Reply
  deleteOneViewHistory(where: ViewHistoryWhereUniqueInput!): ViewHistory
  updateManyGym(data: GymUpdateManyMutationInput!, where: GymWhereInput): AffectedRowsOutput!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  updateManyPostLike(data: PostLikeUpdateManyMutationInput!, where: PostLikeWhereInput): AffectedRowsOutput!
  updateManyPreferredDayAndTime(data: PreferredDayAndTimeUpdateManyMutationInput!, where: PreferredDayAndTimeWhereInput): AffectedRowsOutput!
  updateManyReply(data: ReplyUpdateManyMutationInput!, where: ReplyWhereInput): AffectedRowsOutput!
  updateManyViewHistory(data: ViewHistoryUpdateManyMutationInput!, where: ViewHistoryWhereInput): AffectedRowsOutput!
  updateOneGym(data: GymUpdateInput!, where: GymWhereUniqueInput!): Gym
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOnePostLike(data: PostLikeUpdateInput!, where: PostLikeWhereUniqueInput!): PostLike
  updateOnePreferredDayAndTime(data: PreferredDayAndTimeUpdateInput!, where: PreferredDayAndTimeWhereUniqueInput!): PreferredDayAndTime
  updateOneReply(data: ReplyUpdateInput!, where: ReplyWhereUniqueInput!): Reply
  updateOneViewHistory(data: ViewHistoryUpdateInput!, where: ViewHistoryWhereUniqueInput!): ViewHistory
  upsertOneGym(create: GymCreateInput!, update: GymUpdateInput!, where: GymWhereUniqueInput!): Gym!
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOnePostLike(create: PostLikeCreateInput!, update: PostLikeUpdateInput!, where: PostLikeWhereUniqueInput!): PostLike!
  upsertOnePreferredDayAndTime(create: PreferredDayAndTimeCreateInput!, update: PreferredDayAndTimeUpdateInput!, where: PreferredDayAndTimeWhereUniqueInput!): PreferredDayAndTime!
  upsertOneReply(create: ReplyCreateInput!, update: ReplyUpdateInput!, where: ReplyWhereUniqueInput!): Reply!
  upsertOneViewHistory(create: ViewHistoryCreateInput!, update: ViewHistoryUpdateInput!, where: ViewHistoryWhereUniqueInput!): ViewHistory!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumClimbingTypeFilter {
  equals: ClimbingType
  in: [ClimbingType!]
  not: NestedEnumClimbingTypeFilter
  notIn: [ClimbingType!]
}

input NestedEnumClimbingTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumClimbingTypeFilter
  _min: NestedEnumClimbingTypeFilter
  equals: ClimbingType
  in: [ClimbingType!]
  not: NestedEnumClimbingTypeWithAggregatesFilter
  notIn: [ClimbingType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Post {
  _count: PostCount
  belayMonths: Int!
  climbingType: ClimbingType!
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  experienceMonths: Int!
  grade: String!
  gym: Gym!
  gymId: Int!
  id: Int!
  like(cursor: PostLikeWhereUniqueInput, distinct: [PostLikeScalarFieldEnum!], orderBy: [PostLikeOrderByWithRelationInput!], skip: Int, take: Int, where: PostLikeWhereInput): [PostLike!]!
  preferredDayAndTimes(cursor: PreferredDayAndTimeWhereUniqueInput, distinct: [PreferredDayAndTimeScalarFieldEnum!], orderBy: [PreferredDayAndTimeOrderByWithRelationInput!], skip: Int, take: Int, where: PreferredDayAndTimeWhereInput): [PreferredDayAndTime!]!
  replies(cursor: ReplyWhereUniqueInput, distinct: [ReplyScalarFieldEnum!], orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): [Reply!]!
  title: String!
  updatedAt: DateTime!
  viewHistory(cursor: ViewHistoryWhereUniqueInput, distinct: [ViewHistoryScalarFieldEnum!], orderBy: [ViewHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: ViewHistoryWhereInput): [ViewHistory!]!
}

type PostAvgAggregate {
  belayMonths: Float
  experienceMonths: Float
  gymId: Float
  id: Float
}

input PostAvgOrderByAggregateInput {
  belayMonths: SortOrder
  experienceMonths: SortOrder
  gymId: SortOrder
  id: SortOrder
}

type PostCount {
  like: Int!
  preferredDayAndTimes: Int!
  replies: Int!
  viewHistory: Int!
}

type PostCountAggregate {
  _all: Int!
  belayMonths: Int!
  climbingType: Int!
  content: Int!
  createdAt: Int!
  deletedAt: Int!
  experienceMonths: Int!
  grade: Int!
  gymId: Int!
  id: Int!
  title: Int!
  updatedAt: Int!
}

input PostCountOrderByAggregateInput {
  belayMonths: SortOrder
  climbingType: SortOrder
  content: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  experienceMonths: SortOrder
  grade: SortOrder
  gymId: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PostCreateInput {
  belayMonths: Int!
  climbingType: ClimbingType!
  content: String!
  createdAt: DateTime
  deletedAt: DateTime
  experienceMonths: Int!
  grade: String!
  gym: GymCreateNestedOneWithoutPostsInput!
  like: PostLikeCreateNestedManyWithoutPostInput
  preferredDayAndTimes: PreferredDayAndTimeCreateNestedManyWithoutPostInput
  replies: ReplyCreateNestedManyWithoutPostInput
  title: String!
  updatedAt: DateTime
  viewHistory: ViewHistoryCreateNestedManyWithoutPostInput
}

input PostCreateManyGymInput {
  belayMonths: Int!
  climbingType: ClimbingType!
  content: String!
  createdAt: DateTime
  deletedAt: DateTime
  experienceMonths: Int!
  grade: String!
  id: Int
  title: String!
  updatedAt: DateTime
}

input PostCreateManyGymInputEnvelope {
  data: [PostCreateManyGymInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyInput {
  belayMonths: Int!
  climbingType: ClimbingType!
  content: String!
  createdAt: DateTime
  deletedAt: DateTime
  experienceMonths: Int!
  grade: String!
  gymId: Int!
  id: Int
  title: String!
  updatedAt: DateTime
}

input PostCreateNestedManyWithoutGymInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutGymInput!]
  create: [PostCreateWithoutGymInput!]
  createMany: PostCreateManyGymInputEnvelope
}

input PostCreateNestedOneWithoutLikeInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutLikeInput
  create: PostCreateWithoutLikeInput
}

input PostCreateNestedOneWithoutPreferredDayAndTimesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutPreferredDayAndTimesInput
  create: PostCreateWithoutPreferredDayAndTimesInput
}

input PostCreateNestedOneWithoutRepliesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutRepliesInput
  create: PostCreateWithoutRepliesInput
}

input PostCreateNestedOneWithoutViewHistoryInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutViewHistoryInput
  create: PostCreateWithoutViewHistoryInput
}

input PostCreateOrConnectWithoutGymInput {
  create: PostCreateWithoutGymInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutLikeInput {
  create: PostCreateWithoutLikeInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutPreferredDayAndTimesInput {
  create: PostCreateWithoutPreferredDayAndTimesInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutRepliesInput {
  create: PostCreateWithoutRepliesInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutViewHistoryInput {
  create: PostCreateWithoutViewHistoryInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutGymInput {
  belayMonths: Int!
  climbingType: ClimbingType!
  content: String!
  createdAt: DateTime
  deletedAt: DateTime
  experienceMonths: Int!
  grade: String!
  like: PostLikeCreateNestedManyWithoutPostInput
  preferredDayAndTimes: PreferredDayAndTimeCreateNestedManyWithoutPostInput
  replies: ReplyCreateNestedManyWithoutPostInput
  title: String!
  updatedAt: DateTime
  viewHistory: ViewHistoryCreateNestedManyWithoutPostInput
}

input PostCreateWithoutLikeInput {
  belayMonths: Int!
  climbingType: ClimbingType!
  content: String!
  createdAt: DateTime
  deletedAt: DateTime
  experienceMonths: Int!
  grade: String!
  gym: GymCreateNestedOneWithoutPostsInput!
  preferredDayAndTimes: PreferredDayAndTimeCreateNestedManyWithoutPostInput
  replies: ReplyCreateNestedManyWithoutPostInput
  title: String!
  updatedAt: DateTime
  viewHistory: ViewHistoryCreateNestedManyWithoutPostInput
}

input PostCreateWithoutPreferredDayAndTimesInput {
  belayMonths: Int!
  climbingType: ClimbingType!
  content: String!
  createdAt: DateTime
  deletedAt: DateTime
  experienceMonths: Int!
  grade: String!
  gym: GymCreateNestedOneWithoutPostsInput!
  like: PostLikeCreateNestedManyWithoutPostInput
  replies: ReplyCreateNestedManyWithoutPostInput
  title: String!
  updatedAt: DateTime
  viewHistory: ViewHistoryCreateNestedManyWithoutPostInput
}

input PostCreateWithoutRepliesInput {
  belayMonths: Int!
  climbingType: ClimbingType!
  content: String!
  createdAt: DateTime
  deletedAt: DateTime
  experienceMonths: Int!
  grade: String!
  gym: GymCreateNestedOneWithoutPostsInput!
  like: PostLikeCreateNestedManyWithoutPostInput
  preferredDayAndTimes: PreferredDayAndTimeCreateNestedManyWithoutPostInput
  title: String!
  updatedAt: DateTime
  viewHistory: ViewHistoryCreateNestedManyWithoutPostInput
}

input PostCreateWithoutViewHistoryInput {
  belayMonths: Int!
  climbingType: ClimbingType!
  content: String!
  createdAt: DateTime
  deletedAt: DateTime
  experienceMonths: Int!
  grade: String!
  gym: GymCreateNestedOneWithoutPostsInput!
  like: PostLikeCreateNestedManyWithoutPostInput
  preferredDayAndTimes: PreferredDayAndTimeCreateNestedManyWithoutPostInput
  replies: ReplyCreateNestedManyWithoutPostInput
  title: String!
  updatedAt: DateTime
}

type PostGroupBy {
  _avg: PostAvgAggregate
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
  _sum: PostSumAggregate
  belayMonths: Int!
  climbingType: ClimbingType!
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  experienceMonths: Int!
  grade: String!
  gymId: Int!
  id: Int!
  title: String!
  updatedAt: DateTime!
}

type PostLike {
  id: Int!
  post: Post!
  postId: Int!
  userId: String!
}

type PostLikeAvgAggregate {
  id: Float
  postId: Float
}

input PostLikeAvgOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
}

type PostLikeCountAggregate {
  _all: Int!
  id: Int!
  postId: Int!
  userId: Int!
}

input PostLikeCountOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
  userId: SortOrder
}

input PostLikeCreateInput {
  post: PostCreateNestedOneWithoutLikeInput!
  userId: String!
}

input PostLikeCreateManyInput {
  id: Int
  postId: Int!
  userId: String!
}

input PostLikeCreateManyPostInput {
  id: Int
  userId: String!
}

input PostLikeCreateManyPostInputEnvelope {
  data: [PostLikeCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input PostLikeCreateNestedManyWithoutPostInput {
  connect: [PostLikeWhereUniqueInput!]
  connectOrCreate: [PostLikeCreateOrConnectWithoutPostInput!]
  create: [PostLikeCreateWithoutPostInput!]
  createMany: PostLikeCreateManyPostInputEnvelope
}

input PostLikeCreateOrConnectWithoutPostInput {
  create: PostLikeCreateWithoutPostInput!
  where: PostLikeWhereUniqueInput!
}

input PostLikeCreateWithoutPostInput {
  userId: String!
}

type PostLikeGroupBy {
  _avg: PostLikeAvgAggregate
  _count: PostLikeCountAggregate
  _max: PostLikeMaxAggregate
  _min: PostLikeMinAggregate
  _sum: PostLikeSumAggregate
  id: Int!
  postId: Int!
  userId: String!
}

input PostLikeListRelationFilter {
  every: PostLikeWhereInput
  none: PostLikeWhereInput
  some: PostLikeWhereInput
}

type PostLikeMaxAggregate {
  id: Int
  postId: Int
  userId: String
}

input PostLikeMaxOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
  userId: SortOrder
}

type PostLikeMinAggregate {
  id: Int
  postId: Int
  userId: String
}

input PostLikeMinOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
  userId: SortOrder
}

input PostLikeOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostLikeOrderByWithAggregationInput {
  _avg: PostLikeAvgOrderByAggregateInput
  _count: PostLikeCountOrderByAggregateInput
  _max: PostLikeMaxOrderByAggregateInput
  _min: PostLikeMinOrderByAggregateInput
  _sum: PostLikeSumOrderByAggregateInput
  id: SortOrder
  postId: SortOrder
  userId: SortOrder
}

input PostLikeOrderByWithRelationInput {
  id: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  userId: SortOrder
}

enum PostLikeScalarFieldEnum {
  id
  postId
  userId
}

input PostLikeScalarWhereInput {
  AND: [PostLikeScalarWhereInput!]
  NOT: [PostLikeScalarWhereInput!]
  OR: [PostLikeScalarWhereInput!]
  id: IntFilter
  postId: IntFilter
  userId: StringFilter
}

input PostLikeScalarWhereWithAggregatesInput {
  AND: [PostLikeScalarWhereWithAggregatesInput!]
  NOT: [PostLikeScalarWhereWithAggregatesInput!]
  OR: [PostLikeScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  postId: IntWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type PostLikeSumAggregate {
  id: Int
  postId: Int
}

input PostLikeSumOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
}

input PostLikeUpdateInput {
  post: PostUpdateOneRequiredWithoutLikeNestedInput
  userId: StringFieldUpdateOperationsInput
}

input PostLikeUpdateManyMutationInput {
  userId: StringFieldUpdateOperationsInput
}

input PostLikeUpdateManyWithWhereWithoutPostInput {
  data: PostLikeUpdateManyMutationInput!
  where: PostLikeScalarWhereInput!
}

input PostLikeUpdateManyWithoutPostNestedInput {
  connect: [PostLikeWhereUniqueInput!]
  connectOrCreate: [PostLikeCreateOrConnectWithoutPostInput!]
  create: [PostLikeCreateWithoutPostInput!]
  createMany: PostLikeCreateManyPostInputEnvelope
  delete: [PostLikeWhereUniqueInput!]
  deleteMany: [PostLikeScalarWhereInput!]
  disconnect: [PostLikeWhereUniqueInput!]
  set: [PostLikeWhereUniqueInput!]
  update: [PostLikeUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [PostLikeUpdateManyWithWhereWithoutPostInput!]
  upsert: [PostLikeUpsertWithWhereUniqueWithoutPostInput!]
}

input PostLikeUpdateWithWhereUniqueWithoutPostInput {
  data: PostLikeUpdateWithoutPostInput!
  where: PostLikeWhereUniqueInput!
}

input PostLikeUpdateWithoutPostInput {
  userId: StringFieldUpdateOperationsInput
}

input PostLikeUpsertWithWhereUniqueWithoutPostInput {
  create: PostLikeCreateWithoutPostInput!
  update: PostLikeUpdateWithoutPostInput!
  where: PostLikeWhereUniqueInput!
}

input PostLikeWhereInput {
  AND: [PostLikeWhereInput!]
  NOT: [PostLikeWhereInput!]
  OR: [PostLikeWhereInput!]
  id: IntFilter
  post: PostRelationFilter
  postId: IntFilter
  userId: StringFilter
}

input PostLikeWhereUniqueInput {
  id: Int
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregate {
  belayMonths: Int
  climbingType: ClimbingType
  content: String
  createdAt: DateTime
  deletedAt: DateTime
  experienceMonths: Int
  grade: String
  gymId: Int
  id: Int
  title: String
  updatedAt: DateTime
}

input PostMaxOrderByAggregateInput {
  belayMonths: SortOrder
  climbingType: SortOrder
  content: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  experienceMonths: SortOrder
  grade: SortOrder
  gymId: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type PostMinAggregate {
  belayMonths: Int
  climbingType: ClimbingType
  content: String
  createdAt: DateTime
  deletedAt: DateTime
  experienceMonths: Int
  grade: String
  gymId: Int
  id: Int
  title: String
  updatedAt: DateTime
}

input PostMinOrderByAggregateInput {
  belayMonths: SortOrder
  climbingType: SortOrder
  content: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  experienceMonths: SortOrder
  grade: SortOrder
  gymId: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithAggregationInput {
  _avg: PostAvgOrderByAggregateInput
  _count: PostCountOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
  _sum: PostSumOrderByAggregateInput
  belayMonths: SortOrder
  climbingType: SortOrder
  content: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  experienceMonths: SortOrder
  grade: SortOrder
  gymId: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PostOrderByWithRelationInput {
  belayMonths: SortOrder
  climbingType: SortOrder
  content: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  experienceMonths: SortOrder
  grade: SortOrder
  gym: GymOrderByWithRelationInput
  gymId: SortOrder
  id: SortOrder
  like: PostLikeOrderByRelationAggregateInput
  preferredDayAndTimes: PreferredDayAndTimeOrderByRelationAggregateInput
  replies: ReplyOrderByRelationAggregateInput
  title: SortOrder
  updatedAt: SortOrder
  viewHistory: ViewHistoryOrderByRelationAggregateInput
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

enum PostScalarFieldEnum {
  belayMonths
  climbingType
  content
  createdAt
  deletedAt
  experienceMonths
  grade
  gymId
  id
  title
  updatedAt
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  belayMonths: IntFilter
  climbingType: EnumClimbingTypeFilter
  content: StringFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  experienceMonths: IntFilter
  grade: StringFilter
  gymId: IntFilter
  id: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  belayMonths: IntWithAggregatesFilter
  climbingType: EnumClimbingTypeWithAggregatesFilter
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  experienceMonths: IntWithAggregatesFilter
  grade: StringWithAggregatesFilter
  gymId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type PostSumAggregate {
  belayMonths: Int
  experienceMonths: Int
  gymId: Int
  id: Int
}

input PostSumOrderByAggregateInput {
  belayMonths: SortOrder
  experienceMonths: SortOrder
  gymId: SortOrder
  id: SortOrder
}

input PostUpdateInput {
  belayMonths: IntFieldUpdateOperationsInput
  climbingType: EnumClimbingTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  experienceMonths: IntFieldUpdateOperationsInput
  grade: StringFieldUpdateOperationsInput
  gym: GymUpdateOneRequiredWithoutPostsNestedInput
  like: PostLikeUpdateManyWithoutPostNestedInput
  preferredDayAndTimes: PreferredDayAndTimeUpdateManyWithoutPostNestedInput
  replies: ReplyUpdateManyWithoutPostNestedInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewHistory: ViewHistoryUpdateManyWithoutPostNestedInput
}

input PostUpdateManyMutationInput {
  belayMonths: IntFieldUpdateOperationsInput
  climbingType: EnumClimbingTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  experienceMonths: IntFieldUpdateOperationsInput
  grade: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutGymInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutGymNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutGymInput!]
  create: [PostCreateWithoutGymInput!]
  createMany: PostCreateManyGymInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutGymInput!]
  updateMany: [PostUpdateManyWithWhereWithoutGymInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutGymInput!]
}

input PostUpdateOneRequiredWithoutLikeNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutLikeInput
  create: PostCreateWithoutLikeInput
  update: PostUpdateWithoutLikeInput
  upsert: PostUpsertWithoutLikeInput
}

input PostUpdateOneRequiredWithoutPreferredDayAndTimesNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutPreferredDayAndTimesInput
  create: PostCreateWithoutPreferredDayAndTimesInput
  update: PostUpdateWithoutPreferredDayAndTimesInput
  upsert: PostUpsertWithoutPreferredDayAndTimesInput
}

input PostUpdateOneRequiredWithoutRepliesNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutRepliesInput
  create: PostCreateWithoutRepliesInput
  update: PostUpdateWithoutRepliesInput
  upsert: PostUpsertWithoutRepliesInput
}

input PostUpdateOneRequiredWithoutViewHistoryNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutViewHistoryInput
  create: PostCreateWithoutViewHistoryInput
  update: PostUpdateWithoutViewHistoryInput
  upsert: PostUpsertWithoutViewHistoryInput
}

input PostUpdateWithWhereUniqueWithoutGymInput {
  data: PostUpdateWithoutGymInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutGymInput {
  belayMonths: IntFieldUpdateOperationsInput
  climbingType: EnumClimbingTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  experienceMonths: IntFieldUpdateOperationsInput
  grade: StringFieldUpdateOperationsInput
  like: PostLikeUpdateManyWithoutPostNestedInput
  preferredDayAndTimes: PreferredDayAndTimeUpdateManyWithoutPostNestedInput
  replies: ReplyUpdateManyWithoutPostNestedInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewHistory: ViewHistoryUpdateManyWithoutPostNestedInput
}

input PostUpdateWithoutLikeInput {
  belayMonths: IntFieldUpdateOperationsInput
  climbingType: EnumClimbingTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  experienceMonths: IntFieldUpdateOperationsInput
  grade: StringFieldUpdateOperationsInput
  gym: GymUpdateOneRequiredWithoutPostsNestedInput
  preferredDayAndTimes: PreferredDayAndTimeUpdateManyWithoutPostNestedInput
  replies: ReplyUpdateManyWithoutPostNestedInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewHistory: ViewHistoryUpdateManyWithoutPostNestedInput
}

input PostUpdateWithoutPreferredDayAndTimesInput {
  belayMonths: IntFieldUpdateOperationsInput
  climbingType: EnumClimbingTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  experienceMonths: IntFieldUpdateOperationsInput
  grade: StringFieldUpdateOperationsInput
  gym: GymUpdateOneRequiredWithoutPostsNestedInput
  like: PostLikeUpdateManyWithoutPostNestedInput
  replies: ReplyUpdateManyWithoutPostNestedInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewHistory: ViewHistoryUpdateManyWithoutPostNestedInput
}

input PostUpdateWithoutRepliesInput {
  belayMonths: IntFieldUpdateOperationsInput
  climbingType: EnumClimbingTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  experienceMonths: IntFieldUpdateOperationsInput
  grade: StringFieldUpdateOperationsInput
  gym: GymUpdateOneRequiredWithoutPostsNestedInput
  like: PostLikeUpdateManyWithoutPostNestedInput
  preferredDayAndTimes: PreferredDayAndTimeUpdateManyWithoutPostNestedInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewHistory: ViewHistoryUpdateManyWithoutPostNestedInput
}

input PostUpdateWithoutViewHistoryInput {
  belayMonths: IntFieldUpdateOperationsInput
  climbingType: EnumClimbingTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  experienceMonths: IntFieldUpdateOperationsInput
  grade: StringFieldUpdateOperationsInput
  gym: GymUpdateOneRequiredWithoutPostsNestedInput
  like: PostLikeUpdateManyWithoutPostNestedInput
  preferredDayAndTimes: PreferredDayAndTimeUpdateManyWithoutPostNestedInput
  replies: ReplyUpdateManyWithoutPostNestedInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutGymInput {
  create: PostCreateWithoutGymInput!
  update: PostUpdateWithoutGymInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutLikeInput {
  create: PostCreateWithoutLikeInput!
  update: PostUpdateWithoutLikeInput!
}

input PostUpsertWithoutPreferredDayAndTimesInput {
  create: PostCreateWithoutPreferredDayAndTimesInput!
  update: PostUpdateWithoutPreferredDayAndTimesInput!
}

input PostUpsertWithoutRepliesInput {
  create: PostCreateWithoutRepliesInput!
  update: PostUpdateWithoutRepliesInput!
}

input PostUpsertWithoutViewHistoryInput {
  create: PostCreateWithoutViewHistoryInput!
  update: PostUpdateWithoutViewHistoryInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  belayMonths: IntFilter
  climbingType: EnumClimbingTypeFilter
  content: StringFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  experienceMonths: IntFilter
  grade: StringFilter
  gym: GymRelationFilter
  gymId: IntFilter
  id: IntFilter
  like: PostLikeListRelationFilter
  preferredDayAndTimes: PreferredDayAndTimeListRelationFilter
  replies: ReplyListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  viewHistory: ViewHistoryListRelationFilter
}

input PostWhereUniqueInput {
  id: Int
}

type PreferredDayAndTime {
  createdAt: DateTime!
  dayAndTime: String!
  deletedAt: DateTime
  id: Int!
  post: Post!
  postId: Int!
  updatedAt: DateTime!
}

type PreferredDayAndTimeAvgAggregate {
  id: Float
  postId: Float
}

input PreferredDayAndTimeAvgOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
}

type PreferredDayAndTimeCountAggregate {
  _all: Int!
  createdAt: Int!
  dayAndTime: Int!
  deletedAt: Int!
  id: Int!
  postId: Int!
  updatedAt: Int!
}

input PreferredDayAndTimeCountOrderByAggregateInput {
  createdAt: SortOrder
  dayAndTime: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

input PreferredDayAndTimeCreateInput {
  createdAt: DateTime
  dayAndTime: String!
  deletedAt: DateTime
  post: PostCreateNestedOneWithoutPreferredDayAndTimesInput!
  updatedAt: DateTime
}

input PreferredDayAndTimeCreateManyInput {
  createdAt: DateTime
  dayAndTime: String!
  deletedAt: DateTime
  id: Int
  postId: Int!
  updatedAt: DateTime
}

input PreferredDayAndTimeCreateManyPostInput {
  createdAt: DateTime
  dayAndTime: String!
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
}

input PreferredDayAndTimeCreateManyPostInputEnvelope {
  data: [PreferredDayAndTimeCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input PreferredDayAndTimeCreateNestedManyWithoutPostInput {
  connect: [PreferredDayAndTimeWhereUniqueInput!]
  connectOrCreate: [PreferredDayAndTimeCreateOrConnectWithoutPostInput!]
  create: [PreferredDayAndTimeCreateWithoutPostInput!]
  createMany: PreferredDayAndTimeCreateManyPostInputEnvelope
}

input PreferredDayAndTimeCreateOrConnectWithoutPostInput {
  create: PreferredDayAndTimeCreateWithoutPostInput!
  where: PreferredDayAndTimeWhereUniqueInput!
}

input PreferredDayAndTimeCreateWithoutPostInput {
  createdAt: DateTime
  dayAndTime: String!
  deletedAt: DateTime
  updatedAt: DateTime
}

type PreferredDayAndTimeGroupBy {
  _avg: PreferredDayAndTimeAvgAggregate
  _count: PreferredDayAndTimeCountAggregate
  _max: PreferredDayAndTimeMaxAggregate
  _min: PreferredDayAndTimeMinAggregate
  _sum: PreferredDayAndTimeSumAggregate
  createdAt: DateTime!
  dayAndTime: String!
  deletedAt: DateTime
  id: Int!
  postId: Int!
  updatedAt: DateTime!
}

input PreferredDayAndTimeListRelationFilter {
  every: PreferredDayAndTimeWhereInput
  none: PreferredDayAndTimeWhereInput
  some: PreferredDayAndTimeWhereInput
}

type PreferredDayAndTimeMaxAggregate {
  createdAt: DateTime
  dayAndTime: String
  deletedAt: DateTime
  id: Int
  postId: Int
  updatedAt: DateTime
}

input PreferredDayAndTimeMaxOrderByAggregateInput {
  createdAt: SortOrder
  dayAndTime: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

type PreferredDayAndTimeMinAggregate {
  createdAt: DateTime
  dayAndTime: String
  deletedAt: DateTime
  id: Int
  postId: Int
  updatedAt: DateTime
}

input PreferredDayAndTimeMinOrderByAggregateInput {
  createdAt: SortOrder
  dayAndTime: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

input PreferredDayAndTimeOrderByRelationAggregateInput {
  _count: SortOrder
}

input PreferredDayAndTimeOrderByWithAggregationInput {
  _avg: PreferredDayAndTimeAvgOrderByAggregateInput
  _count: PreferredDayAndTimeCountOrderByAggregateInput
  _max: PreferredDayAndTimeMaxOrderByAggregateInput
  _min: PreferredDayAndTimeMinOrderByAggregateInput
  _sum: PreferredDayAndTimeSumOrderByAggregateInput
  createdAt: SortOrder
  dayAndTime: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

input PreferredDayAndTimeOrderByWithRelationInput {
  createdAt: SortOrder
  dayAndTime: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  updatedAt: SortOrder
}

enum PreferredDayAndTimeScalarFieldEnum {
  createdAt
  dayAndTime
  deletedAt
  id
  postId
  updatedAt
}

input PreferredDayAndTimeScalarWhereInput {
  AND: [PreferredDayAndTimeScalarWhereInput!]
  NOT: [PreferredDayAndTimeScalarWhereInput!]
  OR: [PreferredDayAndTimeScalarWhereInput!]
  createdAt: DateTimeFilter
  dayAndTime: StringFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input PreferredDayAndTimeScalarWhereWithAggregatesInput {
  AND: [PreferredDayAndTimeScalarWhereWithAggregatesInput!]
  NOT: [PreferredDayAndTimeScalarWhereWithAggregatesInput!]
  OR: [PreferredDayAndTimeScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  dayAndTime: StringWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  postId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type PreferredDayAndTimeSumAggregate {
  id: Int
  postId: Int
}

input PreferredDayAndTimeSumOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
}

input PreferredDayAndTimeUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dayAndTime: StringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutPreferredDayAndTimesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PreferredDayAndTimeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dayAndTime: StringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PreferredDayAndTimeUpdateManyWithWhereWithoutPostInput {
  data: PreferredDayAndTimeUpdateManyMutationInput!
  where: PreferredDayAndTimeScalarWhereInput!
}

input PreferredDayAndTimeUpdateManyWithoutPostNestedInput {
  connect: [PreferredDayAndTimeWhereUniqueInput!]
  connectOrCreate: [PreferredDayAndTimeCreateOrConnectWithoutPostInput!]
  create: [PreferredDayAndTimeCreateWithoutPostInput!]
  createMany: PreferredDayAndTimeCreateManyPostInputEnvelope
  delete: [PreferredDayAndTimeWhereUniqueInput!]
  deleteMany: [PreferredDayAndTimeScalarWhereInput!]
  disconnect: [PreferredDayAndTimeWhereUniqueInput!]
  set: [PreferredDayAndTimeWhereUniqueInput!]
  update: [PreferredDayAndTimeUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [PreferredDayAndTimeUpdateManyWithWhereWithoutPostInput!]
  upsert: [PreferredDayAndTimeUpsertWithWhereUniqueWithoutPostInput!]
}

input PreferredDayAndTimeUpdateWithWhereUniqueWithoutPostInput {
  data: PreferredDayAndTimeUpdateWithoutPostInput!
  where: PreferredDayAndTimeWhereUniqueInput!
}

input PreferredDayAndTimeUpdateWithoutPostInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dayAndTime: StringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PreferredDayAndTimeUpsertWithWhereUniqueWithoutPostInput {
  create: PreferredDayAndTimeCreateWithoutPostInput!
  update: PreferredDayAndTimeUpdateWithoutPostInput!
  where: PreferredDayAndTimeWhereUniqueInput!
}

input PreferredDayAndTimeWhereInput {
  AND: [PreferredDayAndTimeWhereInput!]
  NOT: [PreferredDayAndTimeWhereInput!]
  OR: [PreferredDayAndTimeWhereInput!]
  createdAt: DateTimeFilter
  dayAndTime: StringFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  post: PostRelationFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input PreferredDayAndTimeWhereUniqueInput {
  id: Int
}

type Query {
  aggregateGym(cursor: GymWhereUniqueInput, orderBy: [GymOrderByWithRelationInput!], skip: Int, take: Int, where: GymWhereInput): AggregateGym!
  aggregatePost(cursor: PostWhereUniqueInput, orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): AggregatePost!
  aggregatePostLike(cursor: PostLikeWhereUniqueInput, orderBy: [PostLikeOrderByWithRelationInput!], skip: Int, take: Int, where: PostLikeWhereInput): AggregatePostLike!
  aggregatePreferredDayAndTime(cursor: PreferredDayAndTimeWhereUniqueInput, orderBy: [PreferredDayAndTimeOrderByWithRelationInput!], skip: Int, take: Int, where: PreferredDayAndTimeWhereInput): AggregatePreferredDayAndTime!
  aggregateReply(cursor: ReplyWhereUniqueInput, orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): AggregateReply!
  aggregateViewHistory(cursor: ViewHistoryWhereUniqueInput, orderBy: [ViewHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: ViewHistoryWhereInput): AggregateViewHistory!
  findFirstGym(cursor: GymWhereUniqueInput, distinct: [GymScalarFieldEnum!], orderBy: [GymOrderByWithRelationInput!], skip: Int, take: Int, where: GymWhereInput): Gym
  findFirstGymOrThrow(cursor: GymWhereUniqueInput, distinct: [GymScalarFieldEnum!], orderBy: [GymOrderByWithRelationInput!], skip: Int, take: Int, where: GymWhereInput): Gym
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstPostLike(cursor: PostLikeWhereUniqueInput, distinct: [PostLikeScalarFieldEnum!], orderBy: [PostLikeOrderByWithRelationInput!], skip: Int, take: Int, where: PostLikeWhereInput): PostLike
  findFirstPostLikeOrThrow(cursor: PostLikeWhereUniqueInput, distinct: [PostLikeScalarFieldEnum!], orderBy: [PostLikeOrderByWithRelationInput!], skip: Int, take: Int, where: PostLikeWhereInput): PostLike
  findFirstPostOrThrow(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstPreferredDayAndTime(cursor: PreferredDayAndTimeWhereUniqueInput, distinct: [PreferredDayAndTimeScalarFieldEnum!], orderBy: [PreferredDayAndTimeOrderByWithRelationInput!], skip: Int, take: Int, where: PreferredDayAndTimeWhereInput): PreferredDayAndTime
  findFirstPreferredDayAndTimeOrThrow(cursor: PreferredDayAndTimeWhereUniqueInput, distinct: [PreferredDayAndTimeScalarFieldEnum!], orderBy: [PreferredDayAndTimeOrderByWithRelationInput!], skip: Int, take: Int, where: PreferredDayAndTimeWhereInput): PreferredDayAndTime
  findFirstReply(cursor: ReplyWhereUniqueInput, distinct: [ReplyScalarFieldEnum!], orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): Reply
  findFirstReplyOrThrow(cursor: ReplyWhereUniqueInput, distinct: [ReplyScalarFieldEnum!], orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): Reply
  findFirstViewHistory(cursor: ViewHistoryWhereUniqueInput, distinct: [ViewHistoryScalarFieldEnum!], orderBy: [ViewHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: ViewHistoryWhereInput): ViewHistory
  findFirstViewHistoryOrThrow(cursor: ViewHistoryWhereUniqueInput, distinct: [ViewHistoryScalarFieldEnum!], orderBy: [ViewHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: ViewHistoryWhereInput): ViewHistory
  getGym(where: GymWhereUniqueInput!): Gym
  getPost(where: PostWhereUniqueInput!): Post
  getPostLike(where: PostLikeWhereUniqueInput!): PostLike
  getPreferredDayAndTime(where: PreferredDayAndTimeWhereUniqueInput!): PreferredDayAndTime
  getReply(where: ReplyWhereUniqueInput!): Reply
  getViewHistory(where: ViewHistoryWhereUniqueInput!): ViewHistory
  groupByGym(by: [GymScalarFieldEnum!]!, having: GymScalarWhereWithAggregatesInput, orderBy: [GymOrderByWithAggregationInput!], skip: Int, take: Int, where: GymWhereInput): [GymGroupBy!]!
  groupByPost(by: [PostScalarFieldEnum!]!, having: PostScalarWhereWithAggregatesInput, orderBy: [PostOrderByWithAggregationInput!], skip: Int, take: Int, where: PostWhereInput): [PostGroupBy!]!
  groupByPostLike(by: [PostLikeScalarFieldEnum!]!, having: PostLikeScalarWhereWithAggregatesInput, orderBy: [PostLikeOrderByWithAggregationInput!], skip: Int, take: Int, where: PostLikeWhereInput): [PostLikeGroupBy!]!
  groupByPreferredDayAndTime(by: [PreferredDayAndTimeScalarFieldEnum!]!, having: PreferredDayAndTimeScalarWhereWithAggregatesInput, orderBy: [PreferredDayAndTimeOrderByWithAggregationInput!], skip: Int, take: Int, where: PreferredDayAndTimeWhereInput): [PreferredDayAndTimeGroupBy!]!
  groupByReply(by: [ReplyScalarFieldEnum!]!, having: ReplyScalarWhereWithAggregatesInput, orderBy: [ReplyOrderByWithAggregationInput!], skip: Int, take: Int, where: ReplyWhereInput): [ReplyGroupBy!]!
  groupByViewHistory(by: [ViewHistoryScalarFieldEnum!]!, having: ViewHistoryScalarWhereWithAggregatesInput, orderBy: [ViewHistoryOrderByWithAggregationInput!], skip: Int, take: Int, where: ViewHistoryWhereInput): [ViewHistoryGroupBy!]!
  gym(where: GymWhereUniqueInput!): Gym
  gyms(cursor: GymWhereUniqueInput, distinct: [GymScalarFieldEnum!], orderBy: [GymOrderByWithRelationInput!], skip: Int, take: Int, where: GymWhereInput): [Gym!]!
  post(where: PostWhereUniqueInput!): Post
  postLike(where: PostLikeWhereUniqueInput!): PostLike
  postLikes(cursor: PostLikeWhereUniqueInput, distinct: [PostLikeScalarFieldEnum!], orderBy: [PostLikeOrderByWithRelationInput!], skip: Int, take: Int, where: PostLikeWhereInput): [PostLike!]!
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  preferredDayAndTime(where: PreferredDayAndTimeWhereUniqueInput!): PreferredDayAndTime
  preferredDayAndTimes(cursor: PreferredDayAndTimeWhereUniqueInput, distinct: [PreferredDayAndTimeScalarFieldEnum!], orderBy: [PreferredDayAndTimeOrderByWithRelationInput!], skip: Int, take: Int, where: PreferredDayAndTimeWhereInput): [PreferredDayAndTime!]!
  replies(cursor: ReplyWhereUniqueInput, distinct: [ReplyScalarFieldEnum!], orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): [Reply!]!
  reply(where: ReplyWhereUniqueInput!): Reply
  viewHistories(cursor: ViewHistoryWhereUniqueInput, distinct: [ViewHistoryScalarFieldEnum!], orderBy: [ViewHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: ViewHistoryWhereInput): [ViewHistory!]!
  viewHistory(where: ViewHistoryWhereUniqueInput!): ViewHistory
}

enum QueryMode {
  default
  insensitive
}

type Reply {
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  post: Post!
  postId: Int!
  title: String!
  updatedAt: DateTime!
  userName: String!
}

type ReplyAvgAggregate {
  id: Float
  postId: Float
}

input ReplyAvgOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
}

type ReplyCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  postId: Int!
  title: Int!
  updatedAt: Int!
  userName: Int!
}

input ReplyCountOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  postId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userName: SortOrder
}

input ReplyCreateInput {
  content: String!
  createdAt: DateTime
  deletedAt: DateTime
  post: PostCreateNestedOneWithoutRepliesInput!
  title: String!
  updatedAt: DateTime
  userName: String!
}

input ReplyCreateManyInput {
  content: String!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  postId: Int!
  title: String!
  updatedAt: DateTime
  userName: String!
}

input ReplyCreateManyPostInput {
  content: String!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  title: String!
  updatedAt: DateTime
  userName: String!
}

input ReplyCreateManyPostInputEnvelope {
  data: [ReplyCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input ReplyCreateNestedManyWithoutPostInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutPostInput!]
  create: [ReplyCreateWithoutPostInput!]
  createMany: ReplyCreateManyPostInputEnvelope
}

input ReplyCreateOrConnectWithoutPostInput {
  create: ReplyCreateWithoutPostInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateWithoutPostInput {
  content: String!
  createdAt: DateTime
  deletedAt: DateTime
  title: String!
  updatedAt: DateTime
  userName: String!
}

type ReplyGroupBy {
  _avg: ReplyAvgAggregate
  _count: ReplyCountAggregate
  _max: ReplyMaxAggregate
  _min: ReplyMinAggregate
  _sum: ReplySumAggregate
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  postId: Int!
  title: String!
  updatedAt: DateTime!
  userName: String!
}

input ReplyListRelationFilter {
  every: ReplyWhereInput
  none: ReplyWhereInput
  some: ReplyWhereInput
}

type ReplyMaxAggregate {
  content: String
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  postId: Int
  title: String
  updatedAt: DateTime
  userName: String
}

input ReplyMaxOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  postId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userName: SortOrder
}

type ReplyMinAggregate {
  content: String
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  postId: Int
  title: String
  updatedAt: DateTime
  userName: String
}

input ReplyMinOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  postId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userName: SortOrder
}

input ReplyOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReplyOrderByWithAggregationInput {
  _avg: ReplyAvgOrderByAggregateInput
  _count: ReplyCountOrderByAggregateInput
  _max: ReplyMaxOrderByAggregateInput
  _min: ReplyMinOrderByAggregateInput
  _sum: ReplySumOrderByAggregateInput
  content: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  postId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userName: SortOrder
}

input ReplyOrderByWithRelationInput {
  content: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userName: SortOrder
}

enum ReplyScalarFieldEnum {
  content
  createdAt
  deletedAt
  id
  postId
  title
  updatedAt
  userName
}

input ReplyScalarWhereInput {
  AND: [ReplyScalarWhereInput!]
  NOT: [ReplyScalarWhereInput!]
  OR: [ReplyScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  postId: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userName: StringFilter
}

input ReplyScalarWhereWithAggregatesInput {
  AND: [ReplyScalarWhereWithAggregatesInput!]
  NOT: [ReplyScalarWhereWithAggregatesInput!]
  OR: [ReplyScalarWhereWithAggregatesInput!]
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  postId: IntWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userName: StringWithAggregatesFilter
}

type ReplySumAggregate {
  id: Int
  postId: Int
}

input ReplySumOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
}

input ReplyUpdateInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutRepliesNestedInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userName: StringFieldUpdateOperationsInput
}

input ReplyUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userName: StringFieldUpdateOperationsInput
}

input ReplyUpdateManyWithWhereWithoutPostInput {
  data: ReplyUpdateManyMutationInput!
  where: ReplyScalarWhereInput!
}

input ReplyUpdateManyWithoutPostNestedInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutPostInput!]
  create: [ReplyCreateWithoutPostInput!]
  createMany: ReplyCreateManyPostInputEnvelope
  delete: [ReplyWhereUniqueInput!]
  deleteMany: [ReplyScalarWhereInput!]
  disconnect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [ReplyUpdateManyWithWhereWithoutPostInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutPostInput!]
}

input ReplyUpdateWithWhereUniqueWithoutPostInput {
  data: ReplyUpdateWithoutPostInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpdateWithoutPostInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userName: StringFieldUpdateOperationsInput
}

input ReplyUpsertWithWhereUniqueWithoutPostInput {
  create: ReplyCreateWithoutPostInput!
  update: ReplyUpdateWithoutPostInput!
  where: ReplyWhereUniqueInput!
}

input ReplyWhereInput {
  AND: [ReplyWhereInput!]
  NOT: [ReplyWhereInput!]
  OR: [ReplyWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  post: PostRelationFilter
  postId: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userName: StringFilter
}

input ReplyWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type ViewHistory {
  id: Int!
  post: Post!
  postId: Int!
  userId: String!
}

type ViewHistoryAvgAggregate {
  id: Float
  postId: Float
}

input ViewHistoryAvgOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
}

type ViewHistoryCountAggregate {
  _all: Int!
  id: Int!
  postId: Int!
  userId: Int!
}

input ViewHistoryCountOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
  userId: SortOrder
}

input ViewHistoryCreateInput {
  post: PostCreateNestedOneWithoutViewHistoryInput!
  userId: String!
}

input ViewHistoryCreateManyInput {
  id: Int
  postId: Int!
  userId: String!
}

input ViewHistoryCreateManyPostInput {
  id: Int
  userId: String!
}

input ViewHistoryCreateManyPostInputEnvelope {
  data: [ViewHistoryCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input ViewHistoryCreateNestedManyWithoutPostInput {
  connect: [ViewHistoryWhereUniqueInput!]
  connectOrCreate: [ViewHistoryCreateOrConnectWithoutPostInput!]
  create: [ViewHistoryCreateWithoutPostInput!]
  createMany: ViewHistoryCreateManyPostInputEnvelope
}

input ViewHistoryCreateOrConnectWithoutPostInput {
  create: ViewHistoryCreateWithoutPostInput!
  where: ViewHistoryWhereUniqueInput!
}

input ViewHistoryCreateWithoutPostInput {
  userId: String!
}

type ViewHistoryGroupBy {
  _avg: ViewHistoryAvgAggregate
  _count: ViewHistoryCountAggregate
  _max: ViewHistoryMaxAggregate
  _min: ViewHistoryMinAggregate
  _sum: ViewHistorySumAggregate
  id: Int!
  postId: Int!
  userId: String!
}

input ViewHistoryListRelationFilter {
  every: ViewHistoryWhereInput
  none: ViewHistoryWhereInput
  some: ViewHistoryWhereInput
}

type ViewHistoryMaxAggregate {
  id: Int
  postId: Int
  userId: String
}

input ViewHistoryMaxOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
  userId: SortOrder
}

type ViewHistoryMinAggregate {
  id: Int
  postId: Int
  userId: String
}

input ViewHistoryMinOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
  userId: SortOrder
}

input ViewHistoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input ViewHistoryOrderByWithAggregationInput {
  _avg: ViewHistoryAvgOrderByAggregateInput
  _count: ViewHistoryCountOrderByAggregateInput
  _max: ViewHistoryMaxOrderByAggregateInput
  _min: ViewHistoryMinOrderByAggregateInput
  _sum: ViewHistorySumOrderByAggregateInput
  id: SortOrder
  postId: SortOrder
  userId: SortOrder
}

input ViewHistoryOrderByWithRelationInput {
  id: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  userId: SortOrder
}

enum ViewHistoryScalarFieldEnum {
  id
  postId
  userId
}

input ViewHistoryScalarWhereInput {
  AND: [ViewHistoryScalarWhereInput!]
  NOT: [ViewHistoryScalarWhereInput!]
  OR: [ViewHistoryScalarWhereInput!]
  id: IntFilter
  postId: IntFilter
  userId: StringFilter
}

input ViewHistoryScalarWhereWithAggregatesInput {
  AND: [ViewHistoryScalarWhereWithAggregatesInput!]
  NOT: [ViewHistoryScalarWhereWithAggregatesInput!]
  OR: [ViewHistoryScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  postId: IntWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type ViewHistorySumAggregate {
  id: Int
  postId: Int
}

input ViewHistorySumOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
}

input ViewHistoryUpdateInput {
  post: PostUpdateOneRequiredWithoutViewHistoryNestedInput
  userId: StringFieldUpdateOperationsInput
}

input ViewHistoryUpdateManyMutationInput {
  userId: StringFieldUpdateOperationsInput
}

input ViewHistoryUpdateManyWithWhereWithoutPostInput {
  data: ViewHistoryUpdateManyMutationInput!
  where: ViewHistoryScalarWhereInput!
}

input ViewHistoryUpdateManyWithoutPostNestedInput {
  connect: [ViewHistoryWhereUniqueInput!]
  connectOrCreate: [ViewHistoryCreateOrConnectWithoutPostInput!]
  create: [ViewHistoryCreateWithoutPostInput!]
  createMany: ViewHistoryCreateManyPostInputEnvelope
  delete: [ViewHistoryWhereUniqueInput!]
  deleteMany: [ViewHistoryScalarWhereInput!]
  disconnect: [ViewHistoryWhereUniqueInput!]
  set: [ViewHistoryWhereUniqueInput!]
  update: [ViewHistoryUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [ViewHistoryUpdateManyWithWhereWithoutPostInput!]
  upsert: [ViewHistoryUpsertWithWhereUniqueWithoutPostInput!]
}

input ViewHistoryUpdateWithWhereUniqueWithoutPostInput {
  data: ViewHistoryUpdateWithoutPostInput!
  where: ViewHistoryWhereUniqueInput!
}

input ViewHistoryUpdateWithoutPostInput {
  userId: StringFieldUpdateOperationsInput
}

input ViewHistoryUpsertWithWhereUniqueWithoutPostInput {
  create: ViewHistoryCreateWithoutPostInput!
  update: ViewHistoryUpdateWithoutPostInput!
  where: ViewHistoryWhereUniqueInput!
}

input ViewHistoryWhereInput {
  AND: [ViewHistoryWhereInput!]
  NOT: [ViewHistoryWhereInput!]
  OR: [ViewHistoryWhereInput!]
  id: IntFilter
  post: PostRelationFilter
  postId: IntFilter
  userId: StringFilter
}

input ViewHistoryWhereUniqueInput {
  id: Int
}